/**
 * wizardcontroller-azure-taable-retention-applliance
 * Import from \"wizardcontroller-azure-taable-retention-applliance\" Function App
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://wizardcontrolleraapim.azure-api.net/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * DeleteWorkflowCheckpointEditMode
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDeleteworkflowcheckpointeditmode(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDeleteworkflowcheckpointeditmode(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDeleteworkflowcheckpointeditmode(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDeleteworkflowcheckpointeditmode(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling deleteDeleteworkflowcheckpointeditmode.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling deleteDeleteworkflowcheckpointeditmode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/DeleteWorkflowCheckpointEditMode/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AbandonOrchestrations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAbandonorchestrations(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAbandonorchestrations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAbandonorchestrations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAbandonorchestrations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/AbandonOrchestrations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ApplianceContextEndpoint
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAppliancecontextendpoint(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getAppliancecontextendpoint.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getAppliancecontextendpoint.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/ApplianceContextEndpoint/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * EntityChannelFunctions
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntitychannelfunctions(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getEntitychannelfunctions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getEntitychannelfunctions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getEntitychannelfunctions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/EntityChannelFunctions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PurgeWorkflows
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurgeworkflows(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPurgeworkflows(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPurgeworkflows(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPurgeworkflows(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/PurgeWorkflows`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * QueryWorkflowCheckpointStatus
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQueryworkflowcheckpointstatus(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getQueryworkflowcheckpointstatus(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getQueryworkflowcheckpointstatus(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getQueryworkflowcheckpointstatus(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getQueryworkflowcheckpointstatus.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getQueryworkflowcheckpointstatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/QueryWorkflowCheckpointStatus/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * QueryWorkflowEditModeCheckpointStatus
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQueryworkfloweditmodecheckpointstatus(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getQueryworkfloweditmodecheckpointstatus(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getQueryworkfloweditmodecheckpointstatus(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getQueryworkfloweditmodecheckpointstatus(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getQueryworkfloweditmodecheckpointstatus.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getQueryworkfloweditmodecheckpointstatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/QueryWorkflowEditModeCheckpointStatus/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * QueryWorkflowStatus
     * 
     * @param tenantId 
     * @param oid 
     * @param fromDays 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQueryworkflowstatus(tenantId: string, oid: string, fromDays: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getQueryworkflowstatus(tenantId: string, oid: string, fromDays: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getQueryworkflowstatus(tenantId: string, oid: string, fromDays: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getQueryworkflowstatus(tenantId: string, oid: string, fromDays: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getQueryworkflowstatus.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getQueryworkflowstatus.');
        }

        if (fromDays === null || fromDays === undefined) {
            throw new Error('Required parameter fromDays was null or undefined when calling getQueryworkflowstatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/QueryWorkflowStatus/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}/${encodeURIComponent(String(fromDays))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * RetentionPolicyEndpoint
     * 
     * @param tenantId 
     * @param subscriptionId 
     * @param storageAccountId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRetentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRetentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRetentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRetentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getRetentionpolicyendpoint.');
        }

        if (subscriptionId === null || subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling getRetentionpolicyendpoint.');
        }

        if (storageAccountId === null || storageAccountId === undefined) {
            throw new Error('Required parameter storageAccountId was null or undefined when calling getRetentionpolicyendpoint.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getRetentionpolicyendpoint.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/RetentionPolicyEndpoint/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(subscriptionId))}/${encodeURIComponent(String(storageAccountId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * WorkflowOperator
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowoperator(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getWorkflowoperator(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getWorkflowoperator(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getWorkflowoperator(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getWorkflowoperator.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling getWorkflowoperator.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/WorkflowOperator/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AbandonOrchestrations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAbandonorchestrations(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postAbandonorchestrations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postAbandonorchestrations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postAbandonorchestrations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/AbandonOrchestrations`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ApplianceContextEndpoint
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postAppliancecontextendpoint(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postAppliancecontextendpoint(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling postAppliancecontextendpoint.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling postAppliancecontextendpoint.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/ApplianceContextEndpoint/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * EntityChannelFunctions
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postEntitychannelfunctions(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postEntitychannelfunctions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postEntitychannelfunctions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postEntitychannelfunctions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/EntityChannelFunctions`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PostRetentionPolicyEndpoint
     * 
     * @param tenantId 
     * @param subscriptionId 
     * @param storageAccountId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPostretentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPostretentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPostretentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPostretentionpolicyendpoint(tenantId: string, subscriptionId: string, storageAccountId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling postPostretentionpolicyendpoint.');
        }

        if (subscriptionId === null || subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling postPostretentionpolicyendpoint.');
        }

        if (storageAccountId === null || storageAccountId === undefined) {
            throw new Error('Required parameter storageAccountId was null or undefined when calling postPostretentionpolicyendpoint.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling postPostretentionpolicyendpoint.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/PostRetentionPolicyEndpoint/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(subscriptionId))}/${encodeURIComponent(String(storageAccountId))}/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PurgeWorkflows
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPurgeworkflows(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPurgeworkflows(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPurgeworkflows(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPurgeworkflows(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/PurgeWorkflows`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * WorkflowOperator
     * 
     * @param tenantId 
     * @param oid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postWorkflowoperator(tenantId: string, oid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postWorkflowoperator(tenantId: string, oid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postWorkflowoperator(tenantId: string, oid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postWorkflowoperator(tenantId: string, oid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling postWorkflowoperator.');
        }

        if (oid === null || oid === undefined) {
            throw new Error('Required parameter oid was null or undefined when calling postWorkflowoperator.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (apiKeyHeader) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]) {
            headers = headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKeys["Ocp-Apim-Subscription-Key"]);
        }

        // authentication (apiKeyQuery) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["subscription-key"]) {
            queryParameters = queryParameters.set('subscription-key', this.configuration.apiKeys["subscription-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/WorkflowOperator/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(oid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
